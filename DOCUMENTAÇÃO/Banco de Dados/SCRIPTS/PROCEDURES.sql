-- STATUSPEDIDO
DROP PROCEDURE IF EXISTS STATUSPEDIDO_INSERT;
DELIMITER &&
 	CREATE PROCEDURE STATUSPEDIDO_INSERT (
	IN V_STPDESCRICAO VARCHAR(255)
	   
   	)
	BEGIN
    	INSERT INTO STATUSPEDIDO (STPDESCRICAO ) VALUES (V_STPDESCRICAO);
  	END
&&

DROP PROCEDURE IF EXISTS STATUSPEDIDO_UPDATE;
DELIMITER &&
 	CREATE PROCEDURE STATUSPEDIDO_UPDATE (
	IN  V_STPCODIGO INT,
        V_STPDESCRICAO VARCHAR(255)
	   	   
   	)
	BEGIN
    	UPDATE STATUSPEDIDO SET STPDESCRICAO = V_STPDESCRICAO WHERE STPCODIGO = V_STPCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS STATUSPEDIDO_DELETE;
DELIMITER &&
 	CREATE PROCEDURE STATUSPEDIDO_DELETE (
	IN  V_STPCODIGO INT		  
   	)
	BEGIN
    	DELETE FROM STATUSPEDIDO WHERE STPCODIGO = V_STPCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS STATUSPEDIDO_SELECT;
DELIMITER &&
	CREATE PROCEDURE STATUSPEDIDO_SELECT(
        IN codigo INT(11),
        IN descricao VARCHAR(150)
	)
	BEGIN
	    SELECT * FROM statuspedido 
	    WHERE stpCodigo = 
			CASE	
				WHEN codigo = 0 OR codigo IS NULL THEN stpCodigo
				WHEN codigo > 0 THEN codigo		       
			END
		AND stpDescricao LIKE
			CASE	
				WHEN descricao = '' OR descricao IS NULL THEN stpDescricao
				WHEN descricao <> '' THEN CONCAT('%', descricao, '%')
			END;
	END
&&

-- STATUSANUNCIO
DROP PROCEDURE IF EXISTS STATUSANUNCIO_INSERT;
DELIMITER &&
 	CREATE PROCEDURE STATUSANUNCIO_INSERT (
	IN V_STADESCRICAO VARCHAR(255)
	   
   	)
	BEGIN
    	INSERT INTO STATUSANUNCIO (STADESCRICAO ) VALUES (V_STADESCRICAO);
  	END
&&

DROP PROCEDURE IF EXISTS STATUSANUNCIO_UPDATE;
DELIMITER &&
 	CREATE PROCEDURE STATUSANUNCIO_UPDATE (
	IN  V_STACODIGO INT,
	V_STADESCRICAO VARCHAR(255)
	   	   
   	)
	BEGIN
    	UPDATE STATUSANUNCIO SET STADESCRICAO = V_STADESCRICAO WHERE STACODIGO = V_STACODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS STATUSANUNCIO_DELETE;
DELIMITER &&
 	CREATE PROCEDURE STATUSANUNCIO_DELETE (
	IN  V_STACODIGO INT		  
   	)
	BEGIN
    	DELETE FROM STATUSANUNCIO WHERE STACODIGO = V_STACODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS STATUSANUNCIO_SELECT;
DELIMITER &&
	CREATE PROCEDURE STATUSANUNCIO_SELECT(
        IN codigo INT(11),
        IN descricao VARCHAR(150)
	)
	BEGIN
	    SELECT * FROM statusanuncio 
	    WHERE staCodigo = 
			CASE	
				WHEN codigo = 0 OR codigo IS NULL THEN staCodigo
				WHEN codigo > 0 THEN codigo		       
			END
		AND staDescricao LIKE
			CASE	
				WHEN descricao = '' OR descricao IS NULL THEN staDescricao
				WHEN descricao <> '' THEN CONCAT('%', descricao, '%')
			END; 
	END
&&

-- PRODUTO
DROP PROCEDURE IF EXISTS PRODUTO_INSERT;
DELIMITER &&
	CREATE PROCEDURE PRODUTO_INSERT (
 	IN V_PRONOME VARCHAR(255),
	   V_PROESTOQUEMIN INT,
	   V_PROPRECO DECIMAL(8,2),
	   V_PROISATIVO BOOL 
   	)
	BEGIN
    	INSERT INTO PRODUTO (PRONOME, PROESTOQUEMIN, PROPRECO, PROQUANTIDADE, PROISATIVO) VALUES (V_PRONOME, V_PROESTOQUEMIN, V_PROPRECO, V_PROQUANTIDADE, V_PROISATIVO);
	END
&&

DROP PROCEDURE IF EXISTS PRODUTO_UPDATE;
DELIMITER &&
	CREATE PROCEDURE PRODUTO_UPDATE (

 	IN 
	V_PROCODIGO INT,
 	V_PRONOME VARCHAR(255),
  	V_PROESTOQUEMIN INT,
   	V_PROPRECO DECIMAL(8,2),
   	V_PROISATIVO BOOL
   	)
	BEGIN

    	UPDATE PRODUTO SET PRONOME = V_PRONOME, PROESTOQUEMIN = V_PROESTOQUEMIN, PROPRECO = V_PROPRECO, PROISATIVO = V_PROISATIVO WHERE PROCODIGO = V_PROCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS PRODUTO_DELETE;
DELIMITER &&
 	CREATE PROCEDURE PRODUTO_DELETE (
		IN V_PROCODIGO INT	   
   	)
	BEGIN
    	DELETE FROM PRODUTO WHERE PROCODIGO = V_PROCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS PRODUTO_SELECT;
DELIMITER &&
	CREATE PROCEDURE PRODUTO_SELECT(
        IN codigo INT(11),
        IN nome VARCHAR(150),
        IN preco DECIMAL(8,2),
        IN quantidade INT
	)
	BEGIN
	    SELECT * FROM   PRODUTO 
	    WHERE proCodigo = 
			CASE	
				WHEN codigo = 0 OR codigo IS NULL THEN proCodigo
				WHEN codigo > 0 THEN codigo		       
			END
		AND proNome LIKE
			CASE	
				WHEN nome = '' OR nome IS NULL THEN proNome
				WHEN nome <> '' THEN CONCAT('%', nome, '%')
			END
	    AND proPreco LIKE
			CASE	
				WHEN preco = 0 OR preco IS NULL THEN proPreco
				WHEN preco > 0 THEN preco
			END
		AND proQuantidade LIKE
			CASE	
				WHEN quantidade = 0 OR quantidade IS NULL THEN proQuantidade
				WHEN quantidade > 0 THEN quantidade
			END;   
	END
&&

-- USUARIO
DROP PROCEDURE IF EXISTS USUARIO_INSERT;
DELIMITER &&
 	CREATE PROCEDURE USUARIO_INSERT (
	IN V_USRLOGIN VARCHAR(255),
	   v_USRSENHA VARCHAR(255),
	   V_USRISADMINISTRADOR BOOL,
	   V_USRISATIVO BOOL	   
   	)
	BEGIN
    	INSERT INTO USUARIO (USRLOGIN,USRSENHA,USRISADMINISTRADOR,USRISATIVO) 
		VALUES (V_USRLOGIN,V_USRSENHA,V_USRISADMINISTRADOR,V_USRISATIVO);
  	END
&&

DROP PROCEDURE IF EXISTS USUARIO_UPDATE;
DELIMITER &&
 	CREATE PROCEDURE USUARIO_UPDATE (
	IN  V_USRCODIGO INT,
        V_USRLOGIN VARCHAR(255),
	    V_USRSENHA VARCHAR(255),
		V_USRISADMINISTRADOR BOOL,
		V_USRISATIVO BOOL
           	   
   	)
	BEGIN
    	UPDATE USUARIO SET USRLOGIN = V_USRLOGIN, USRSENHA = V_USRSENHA, USRISADMINISTRADOR = V_USRISADMINISTRADOR, USRISATIVO = V_USRISATIVO 
		WHERE USRCODIGO = V_USRCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS USUARIO_DELETE;
DELIMITER &&
 	CREATE PROCEDURE USUARIO_DELETE (
	IN  V_USRCODIGO INT		  
   	)
	BEGIN
    	DELETE FROM USUARIO WHERE USRCODIGO = V_USRCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS USUARIO_SELECT;
DELIMITER &&
	CREATE PROCEDURE USUARIO_SELECT(
	        IN codigo INT(11),
	        IN login VARCHAR(150)
	)
	BEGIN
	    SELECT * FROM USUARIO 
	    WHERE usrCodigo = 
			CASE	
				WHEN codigo = 0 OR codigo IS NULL THEN usrCodigo
				WHEN codigo > 0 THEN codigo		       
			END
		AND usrLogin LIKE
			CASE	
				WHEN login = '' OR login IS NULL THEN usrLogin
				WHEN login <> '' THEN CONCAT('%', login, '%')
			END;
	END
&&

-- TIPOAVALIACOES
DROP PROCEDURE IF EXISTS TIPOAVALIACOES_INSERT;
DELIMITER &&
 	CREATE PROCEDURE TIPOAVALIACOES_INSERT (
		IN V_TIVDESCRICAO VARCHAR(255)	   
   	)
	BEGIN
    	INSERT INTO TIPOAVALIACOES (TIVDESCRICAO ) VALUES (V_TIVDESCRICAO);
  	END
&&

DROP PROCEDURE IF EXISTS TIPOAVALIACOES_UPDATE;
DELIMITER &&
 	CREATE PROCEDURE TIPOAVALIACOES_UPDATE (
		IN  V_TIVCODIGO INT,
	V_TIVDESCRICAO VARCHAR(255)
	   	   
   	)
	BEGIN
    	UPDATE TIPOAVALIACOES SET TIVDESCRICAO = V_TIVDESCRICAO WHERE TIVCODIGO = V_TIVCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS TIPOAVALIACOES_DELETE;
DELIMITER &&
 	CREATE PROCEDURE TIPOAVALIACOES_DELETE (
		IN  V_TIVCODIGO INT		  
   	)
	BEGIN
    	DELETE FROM TIPOAVALIACOES WHERE TIVCODIGO = V_TIVCODIGO;
	END
&&

DROP PROCEDURE IF EXISTS TIPOAVALIACAO_SELECT;
DELIMITER &&
	CREATE PROCEDURE TIPOAVALIACAO_SELECT(
        IN codigo INT(11),
        IN descricao VARCHAR(150)
	)
	BEGIN
	    SELECT * FROM tipoavaliacoes 
	    WHERE tivCodigo = 
			CASE	
				WHEN codigo = 0 OR codigo IS NULL THEN tivCodigo
				WHEN codigo > 0 THEN codigo		       
			END
		AND tivDescricao LIKE
			CASE	
				WHEN descricao = '' OR descricao IS NULL THEN tivDescricao
				WHEN descricao <> '' THEN CONCAT('%', descricao, '%')
			END;    
	END
&&

-- TIPOANUNCIO
DROP PROCEDURE IF EXISTS TIPOANUNCIO_INSERT;
DELIMITER &&
 	CREATE PROCEDURE TIPOANUNCIO_INSERT (
	IN V_TIADESCRICAO VARCHAR(255),
	   V_TIAPERCENTUAL DECIMAL(8,2)	   
   	)
	BEGIN
    	INSERT INTO TIPOANUNCIO (TIADESCRICAO, TIAPERCENTUAL) VALUES (V_TIADESCRICAO, V_TIAPERCENTUAL);
  	END
&&

DROP PROCEDURE IF EXISTS TIPOANUNCIO_UPDATE;
DELIMITER &&
 	CREATE PROCEDURE TIPOANUNCIO_UPDATE (
	IN  V_TIACODIGO INT,
		V_TIADESCRICAO VARCHAR(255),
	   	V_TIAPERCENTUAL DECIMAL(8,2)	   
   	)
	BEGIN
    	UPDATE TIPOANUNCIO SET TIADESCRICAO = V_TIADESCRICAO, TIAPERCENTUAL = V_TIAPERCENTUAL WHERE TIACODIGO = V_TIACODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS TIPOANUNCIO_DELETE;
DELIMITER &&
 	CREATE PROCEDURE TIPOANUNCIO_DELETE (
	IN  V_TIACODIGO INT		  
   	)
	BEGIN
    	DELETE FROM TIPOANUNCIO WHERE TIACODIGO = V_TIACODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS TIPOANUNCIO_SELECT;
DELIMITER &&
	CREATE PROCEDURE TIPOANUNCIO_SELECT(
        IN codigo INT(11),
        IN descricao VARCHAR(150)
	)
	BEGIN
	    SELECT * FROM   TIPOANUNCIO 
	    WHERE tiaCodigo = 
			CASE	
				WHEN codigo = 0 OR codigo IS NULL THEN tiaCodigo
				WHEN codigo > 0 THEN codigo		       
			END
		AND tiaDescricao LIKE
			CASE	
				WHEN descricao = '' OR descricao IS NULL THEN tiaDescricao
				WHEN descricao <> '' THEN CONCAT('%', descricao, '%')
			END;    
	END
&&

-- CLIENTE
DROP PROCEDURE IF EXISTS CLIENTE_INSERT;
DELIMITER &&
 	CREATE PROCEDURE CLIENTE_INSERT (
	IN V_CLINOME VARCHAR(255),
	   V_CLIEMAIL VARCHAR(255)	   
   	)
	BEGIN
    	INSERT INTO CLIENTE (CLINOME, CLIEMAIL) VALUES (V_CLINOME, V_CLIEMAIL);
  	END
&&

DROP PROCEDURE IF EXISTS CLIENTE_UPDATE;
DELIMITER &&
 	CREATE PROCEDURE CLIENTE_UPDATE (
	IN  V_CLICODIGO INT,
		V_CLINOME VARCHAR(255),
	   	V_CLIEMAIL VARCHAR(255)	   
   	)
	BEGIN
    	UPDATE CLIENTE SET CLINOME = V_CLINOME, CLIEMAIL = V_CLIEMAIL WHERE CLICODIGO = V_CLICODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS CLIENTE_DELETE;
DELIMITER &&
 	CREATE PROCEDURE CLIENTE_DELETE (
	IN  V_CLICODIGO INT		  
   	)
	BEGIN
    	DELETE FROM CLIENTE WHERE CLICODIGO = V_CLICODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS CLIENTE_SELECT;
DELIMITER &&
	CREATE PROCEDURE CLIENTE_SELECT(
        IN codigo INT(11),
        IN nome VARCHAR(150),
        IN email VARCHAR(150)
	)
	BEGIN
	    SELECT * FROM   cliente 
	    WHERE cliCodigo = 
			CASE	
				WHEN codigo = 0 OR codigo IS NULL THEN cliCodigo
				WHEN codigo > 0 THEN codigo		       
			END
		AND cliNome LIKE
			CASE	
				WHEN nome = '' OR nome IS NULL THEN cliNome
				WHEN nome <> '' THEN CONCAT('%', nome, '%')
			END
	    AND cliEmail LIKE
			CASE	
				WHEN email = '' OR email IS NULL THEN cliEmail
				WHEN email <> '' THEN CONCAT('%', email, '%')
			END;    
	END
&&

-- TIPOMOVIMENTACAO
DROP PROCEDURE IF EXISTS TIPOMOVIMENTACAO_INSERT;
DELIMITER &&
 	CREATE PROCEDURE TIPOMOVIMENTACAO_INSERT (
	IN V_TIMDESCRICAO VARCHAR(255),
	   V_OPERACAO BOOL	   
   	)
	BEGIN
    	INSERT INTO TIPOMOVIMENTACAO (TIMDESCRICAO,TIMOPERACAO) 
		VALUES (V_TIMDESCRICAO,V_OPERACAO);
  	END
&&

DROP PROCEDURE IF EXISTS TIPOMOVIMENTACAO_UPDATE;
DELIMITER &&
 	CREATE PROCEDURE TIPOMOVIMENTACAO_UPDATE (
	IN  V_TIMCODIGO INT,
		V_TIMDESCRICAO VARCHAR(255),
		V_TIMOPERACAO BOOL
           	   
   	)
	BEGIN
    	UPDATE TIPOMOVIMENTACAO SET TIMDESCRICAO = V_TIMDESCRICAO, TIMOPERACAO = V_TIMOPERACAO 
		WHERE TIMCODIGO = V_TIMCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS TIPOMOVIMENTACAO_DELETE;
DELIMITER &&
 	CREATE PROCEDURE TIPOMOVIMENTACAO_DELETE (
	IN  V_TIMCODIGO INT		  
   	)
	BEGIN
    	DELETE FROM TIPOMOVIMENTACAO WHERE TIMCODIGO = V_TIMCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS TIPOMOVIMENTACAO_SELECT;
DELIMITER &&
	CREATE PROCEDURE TIPOMOVIMENTACAO_SELECT(
        IN codigo INT(11),
        IN descricao VARCHAR(150)
	)
	BEGIN
	    SELECT * FROM TIPOMOVIMENTACAO 
	    WHERE timCodigo = 
			CASE	
				WHEN codigo = 0 OR codigo IS NULL THEN timCodigo
				WHEN codigo > 0 THEN codigo		       
			END
		AND timDescricao LIKE
			CASE	
				WHEN descricao = '' OR descricao IS NULL THEN timDescricao
				WHEN descricao <> '' THEN CONCAT('%', descricao, '%')
			END;    
	END
&&

-- ENTRADA--
DROP PROCEDURE IF EXISTS ENTRADA_INSERT;
DELIMITER &&
 	CREATE PROCEDURE ENTRADA_INSERT (
	IN 
	   V_ENTLOTE VARCHAR(255),
	   V_ENTVALORTOTAL DECIMAL(8,2),
       V_ENTOBSERVACAO VARCHAR(255)	   
   	)
	BEGIN
    	INSERT INTO ENTRADA (ENTLOTE, ENTVALORTOTAL,ENTOBSERVACAO) VALUES (V_ENTLOTE, V_ENTVALORTOTAL,V_ENTOBSERVACAO);
  	END
&&

DROP PROCEDURE IF EXISTS ENTRADA_UPDATE;
DELIMITER &&
 	CREATE PROCEDURE ENTRADA_UPDATE (
	IN  V_ENTCODIGO INT,
	    V_ENTLOTE VARCHAR(255),
		V_VALORTOTAL DECIMAL(8,2),
        V_ENTOBSERVACAO VARCHAR(255)   	   
   	)
	BEGIN
    	UPDATE ENTRADA SET ENTLOTE = V_ENTLOTE, ENTVALORTOTAL = V_VALORTOTAL,ENTOBSERVACAO= V_ENTOBSERVACAO WHERE ENTCODIGO = V_ENTCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS ENTRADA_DELETE;
DELIMITER &&
 	CREATE PROCEDURE ENTRADA_DELETE (
	IN  V_ENTCODIGO INT		  
   	)
	BEGIN
    	DELETE FROM ENTRADA WHERE ENTCODIGO = V_ENTCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS ENTRADA_SELECT;
DELIMITER &&
	CREATE PROCEDURE ENTRADA_SELECT(
        IN codigo INT(11),
        IN lote varchar(255),
        IN valorTotal DECIMAL(8,2),
        IN observacao VARCHAR (255)
	)
	BEGIN
	    SELECT *
		FROM entrada
	    WHERE entCodigo = 
			CASE	
				WHEN codigo = 0 OR codigo IS NULL THEN entCodigo
				WHEN codigo > 0 THEN codigo		       
			END	
		AND entLote LIKE
			CASE	
				WHEN lote = '' OR lote IS NULL THEN entLote
				WHEN lote <> '' THEN CONCAT('%', lote, '%')
			END
		AND entValorTotal =
			CASE	
				WHEN valorTotal = 0 OR valorTotal IS NULL THEN entValorTotal
				WHEN valorTotal > 0 THEN valorTotal
			END
		AND entObservacao LIKE
			CASE	
				WHEN observacao = '' OR observacao IS NULL THEN entObservacao
				WHEN observacao <> '' THEN CONCAT('%', observacao, '%')
			END;
	END
&&

-- OUTRASMOVIMENTAÇOES
DROP PROCEDURE IF EXISTS OUTRASMOVIMENTACOES_INSERT;
DELIMITER &&
 	CREATE PROCEDURE OUTRASMOVIMENTACOES_INSERT (
	IN V_TIMCODIGO INT,
	   V_MOVDESCRICAO VARCHAR(255),
	   V_MOVVALOR DECIMAL(8,2),
       V_MOVDATA DATE	   
   	)
	BEGIN
    	INSERT INTO OUTRASMOVIMENTACOES ( TIMCODIGO, MOVDESCRICAO,MOVVALOR,MOVDATA) 
		VALUES (V_TIMCODIGO, V_MOVDESCRICAO,V_MOVVALOR,V_MOVDATA);
  	END
&&

DROP PROCEDURE IF EXISTS OUTRASMOVIMENTACOES_UPDATE;
DELIMITER &&
 	CREATE PROCEDURE OUTRASMOVIMENTACOES_UPDATE (
	IN  V_MOVCODIGO INT,
		V_TIMCODIGO INT,
	    V_MOVDESCRICAO VARCHAR(255),
		V_MOVVALOR DECIMAL(8,2), 
		V_MOVDATA DATE
           	   
   	)
	BEGIN
    	UPDATE OUTRASMOVIMENTACOES SET TIMCODIGO = V_TIMCODIGO, MOVDESCRICAO = V_MOVDESCRICAO, MOVVALOR = V_MOVVALOR, MOVDATA = V_MOVDATA 
		WHERE MOVCODIGO = V_MOVCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS OUTRASMOVIMENTACOES_DESCRICAO_UPDATE;
DELIMITER &&
 	CREATE PROCEDURE OUTRASMOVIMENTACOES_DESCRICAO_UPDATE (
	IN  V_MOVDESCRICAO VARCHAR(255),
		V_MOVVALOR DECIMAL(8,2), 
		V_MOVDATA DATE
           	   
   	)
	BEGIN
    	UPDATE OUTRASMOVIMENTACOES SET MOVVALOR = V_MOVVALOR, MOVDATA = V_MOVDATA 
		WHERE MOVDESCRICAO = V_MOVDESCRICAO;
  	END
&&

DROP PROCEDURE IF EXISTS OUTRASMOVIMENTACOES_DELETE;
DELIMITER &&
 	CREATE PROCEDURE OUTRASMOVIMENTACOES_DELETE (
	IN  V_MOVCODIGO INT		  
   	)
	BEGIN
    	DELETE FROM OUTRASMOVIMENTACOES WHERE MOVCODIGO = V_MOVCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS OUTRASMOVIMENTACOES_DESCRICAO_DELETE;
DELIMITER &&
 	CREATE PROCEDURE OUTRASMOVIMENTACOES_DESCRICAO_DELETE (
	IN  V_MOVDESCRICAO VARCHAR(255) 
   	)
	BEGIN
    	DELETE FROM OUTRASMOVIMENTACOES WHERE MOVDESCRICAO = V_MOVDESCRICAO;
  	END
&&

DROP PROCEDURE IF EXISTS OUTRASMOVIMENTACOES_SELECT;
DELIMITER &&
	CREATE PROCEDURE OUTRASMOVIMENTACOES_SELECT (
		IN codigo INT,
		IN descricao VARCHAR(255),
		IN valor DECIMAL(8,2),
		IN data DATE,
		IN tipoMovimentacao VARCHAR(255)
	)
	BEGIN
		SELECT movCodigo, movDescricao, movValor, movData, outrasmovimentacoes.timCodigo, timDescricao
		FROM outrasmovimentacoes 
		INNER JOIN tipoMovimentacao 
		ON outrasMovimentacoes.timCodigo = tipoMovimentacao.timCodigo
		WHERE movCodigo = 
			CASE	
				WHEN codigo = 0 OR codigo IS NULL THEN movCodigo
				WHEN codigo > 0 THEN codigo		       
			END
		AND movDescricao LIKE
			CASE	
				WHEN descricao = '' OR descricao IS NULL THEN movDescricao
				WHEN descricao <> '' THEN CONCAT('%', descricao, '%')
			END
		AND movValor LIKE
			CASE	
				WHEN valor = 0 OR valor IS NULL THEN movValor
				WHEN valor > 0 THEN valor
			END
		AND movData LIKE
			CASE	
				WHEN data = '' OR data IS NULL THEN movData
				WHEN data <> '' THEN CONCAT('%', data, '%')
			END
		AND timDescricao =
			CASE	
				WHEN tipoMovimentacao = '' OR tipoMovimentacao IS NULL THEN timDescricao
				WHEN tipoMovimentacao <> '' THEN tipoMovimentacao
			END;
	END
&&

-- ANUNCIO
DROP PROCEDURE IF EXISTS ANUNCIO_INSERT;
DELIMITER &&
 	CREATE PROCEDURE ANUNCIO_INSERT (
	IN V_STACODIGO INT,
	   v_TIACODIGO INT,
	   V_ANUDESCRICAO VARCHAR(255),
	   V_ANUPRECO DECIMAL(8,2),
	   V_ANUDATACRIACAO DATE,
	   V_ANUISATIVO BOOL	   
   	)
	BEGIN
    	INSERT INTO ANUNCIO (STACODIGO,TIACODIGO,ANUDESCRICAO,ANUPRECO,ANUDATACRIACAO,ANUISATIVO) VALUES (V_STACODIGO, V_TIACODIGO, V_ANUDESCRICAO, V_ANUPRECO, V_ANUDATACRIACAO, V_ANUISATIVO);
  	END
&&

DROP PROCEDURE IF EXISTS ANUNCIO_UPDATE;
DELIMITER &&
 	CREATE PROCEDURE ANUNCIO_UPDATE (
	IN  V_ANUCODIGO INT,
		V_STACODIGO INT,
	    V_TIACODIGO INT,
		V_ANUDESCRICAO VARCHAR(255),
	   	V_ANUPRECO DECIMAL(8,2),
		V_ANUISATIVO BOOL   	   
   	)
	BEGIN
    	UPDATE ANUNCIO SET STACODIGO = V_STACODIGO, TIACODIGO = V_TIACODIGO,ANUDESCRICAO = V_ANUDESCRICAO, ANUPRECO = V_ANUPRECO, ANUISATIVO = V_ANUISATIVO
		WHERE ANUCODIGO = V_ANUCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS ANUNCIO_DELETE;
DELIMITER &&
 	CREATE PROCEDURE ANUNCIO_DELETE (
	IN  V_ANUCODIGO INT		  
   	)
	BEGIN
    	DELETE FROM ANUNCIO WHERE ANUCODIGO = V_ANUCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS ANUNCIO_SELECT;
DELIMITER &&
	CREATE PROCEDURE ANUNCIO_SELECT (
		IN codigo INT,
		IN descricao VARCHAR(255),
		IN preco DECIMAL(8,2),
		IN dataCriacao DATE,
		IN tipoAnuncio VARCHAR(255),
		IN statusAnuncio VARCHAR(255)
	)
	BEGIN
		SELECT a.anuCodigo, s.staDescricao, t.tiaDescricao, a.anuDescricao, a.anuPreco, a.anuDataCriacao, s.staCodigo, t.tiaCodigo
		FROM anuncio AS a 
		INNER JOIN statusAnuncio AS s ON a.staCodigo = s.staCodigo 
		INNER JOIN tipoanuncio AS t on a.tiaCodigo = t.tiaCodigo
		WHERE a.anuCodigo = 
			CASE	
				WHEN codigo = 0 OR codigo IS NULL THEN a.anuCodigo
				WHEN codigo > 0 THEN codigo		       
			END
		AND a.anuDescricao LIKE
			CASE	
				WHEN descricao = '' OR descricao IS NULL THEN a.anuDescricao
				WHEN descricao <> '' THEN CONCAT('%', descricao, '%')
			END
		AND a.anuPreco LIKE
			CASE	
				WHEN preco = 0 OR preco IS NULL THEN a.anuPreco
				WHEN preco > 0 THEN preco
			END
		AND a.anuDataCriacao LIKE
			CASE	
				WHEN dataCriacao = '' OR dataCriacao IS NULL THEN a.anuDataCriacao
				WHEN dataCriacao <> '' THEN CONCAT('%', dataCriacao, '%')
			END    
		AND s.staDescricao =
			CASE	
				WHEN statusAnuncio = '' OR statusAnuncio IS NULL THEN s.staDescricao
				WHEN statusAnuncio <> '' THEN statusAnuncio
			END
		AND t.tiaDescricao =
			CASE	
				WHEN tipoAnuncio = '' OR tipoAnuncio IS NULL THEN t.tiaDescricao
				WHEN tipoAnuncio <> '' THEN tipoAnuncio
			END
			
		ORDER BY a.anuCodigo;
	END
&&

-- ITENSENTRADA
DROP PROCEDURE IF EXISTS ITENSENTRADA_INSERT;
DELIMITER &&
 	CREATE PROCEDURE ITENSENTRADA_INSERT (
	IN V_PROCODIGO INT,
	   V_ENTCODIGO INT,
	   V_ITEQUANTIDADE INT,
       V_ITEVALORTOTAL DECIMAL(8,2)	   
   	)
	BEGIN
    	INSERT INTO ITENSENTRADA (PROCODIGO,ENTCODIGO,ITEQUANTIDADE,ITEVALORTOTAL) 
		VALUES (V_PROCODIGO,V_ENTCODIGO,V_ITEQUANTIDADE,V_ITEVALORTOTAL);
  	END
&&

DROP PROCEDURE IF EXISTS ITENSENTRADA_UPDATE;
DELIMITER &&
 	CREATE PROCEDURE ITENSENTRADA_UPDATE (
	IN  V_PROCODIGO INT,
	    V_ENTCODIGO INT,
		V_ITEQUANTIDADE INT,
		V_ITEVALORTOTAL DECIMAL(8,2)
           	   
   	)
	BEGIN
    	UPDATE ITENSENTRADA SET PROCODIGO = V_PROCODIGO, ENTCODIGO = V_ENTCODIGO,ITEQUANTIDADE = V_ITEQUANTIDADE, ITEVALORTOTAL = V_ITEVALORTOTAL WHERE PROCODIGO = V_PROCODIGO AND ENTCODIGO = V_ENTCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS ITENSENTRADA_DELETE;
DELIMITER &&
 	CREATE PROCEDURE ITENSENTRADA_DELETE (
	IN V_ENTCODIGO INT
   	)
	BEGIN
    	DELETE FROM ITENSENTRADA WHERE ENTCODIGO = V_ENTCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS ITENSENTRADA_SELECT;
DELIMITER &&
	CREATE PROCEDURE ITENSENTRADA_SELECT(
	    IN codigo INT(11)
	)
	BEGIN
		SELECT itensEntrada.*, produto.proNome, produto.proPreco
		FROM itensEntrada INNER JOIN produto on itensEntrada.proCodigo = produto.proCodigo
		WHERE entCodigo = codigo;
	END
&&

-- PEDIDO
DROP PROCEDURE IF EXISTS PEDIDO_INSERT;
DELIMITER &&
 	CREATE PROCEDURE PEDIDO_INSERT (
 	IN V_TIVCODIGO INT,
	   V_STPCODIGO INT,
	   V_ANUCODIGO INT,
	   V_CLICODIGO INT,
	   V_PEDDATAVENDA DATE,
	   V_PEDVALORFRETE DECIMAL(8,2),
	   V_PEDDATAPOSTAGEM DATE,
	   V_PEDDATAENTREGA DATE,
	   V_PEDVALORTOTAL DECIMAL(8,2),
	   V_PEDCODIGOPOSTAGEM VARCHAR(255),
	   V_PEDOBSERVACAO VARCHAR(255)
   	)
	BEGIN
    	INSERT INTO PEDIDO (TIVCODIGO, STPCODIGO, ANUCODIGO, CLICODIGO, PEDDATAVENDA, PEDVALORFRETE, PEDDATAPOSTAGEM, PEDDATAENTREGA, PEDVALORTOTAL, PEDCODIGOPOSTAGEM, PEDOBSERVACAO) VALUES (V_TIVCODIGO, V_STPCODIGO, V_ANUCODIGO, V_CLICODIGO, V_PEDDATAVENDA, V_PEDVALORFRETE, V_PEDDATAPOSTAGEM, V_PEDDATAENTREGA, V_PEDVALORTOTAL, V_PEDCODIGOPOSTAGEM, V_PEDOBSERVACAO);
  	END
&&

DROP PROCEDURE IF EXISTS PEDIDO_UPDATE;
DELIMITER &&
 	CREATE PROCEDURE PEDIDO_UPDATE (
	IN V_PEDCODIGO INT,
	   V_TIVCODIGO INT,
	   V_STPCODIGO INT,
	   V_ANUCODIGO INT,
	   V_CLICODIGO INT,
	   V_PEDDATAVENDA DATE,
	   V_PEDVALORFRETE DECIMAL(8,2),
	   V_PEDDATAPOSTAGEM DATE,
	   V_PEDDATAENTREGA DATE,
	   V_PEDVALORTOTAL DECIMAL(8,2),
	   V_PEDCODIGOPOSTAGEM VARCHAR(255),
	   V_PEDOBSERVACAO VARCHAR(255)
   	)
	BEGIN
    	UPDATE PEDIDO SET TIVCODIGO = V_TIVCODIGO, STPCODIGO = V_STPCODIGO, CLICODIGO = V_CLICODIGO, PEDDATAVENDA = V_PEDDATAVENDA, PEDVALORFRETE = V_PEDVALORFRETE, PEDDATAPOSTAGEM = V_PEDDATAPOSTAGEM, PEDDATAENTREGA = V_PEDDATAENTREGA, PEDVALORTOTAL = V_PEDVALORTOTAL,  PEDCODIGOPOSTAGEM = V_PEDCODIGOPOSTAGEM, PEDOBSERVACAO = V_PEDOBSERVACAO WHERE PEDCODIGO = V_PEDCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS PEDIDO_DELETE;
DELIMITER &&
 	CREATE PROCEDURE PEDIDO_DELETE (
	IN V_PEDCODIGO INT	   
   	)
	BEGIN
    	DELETE FROM PEDIDO WHERE PEDCODIGO = V_PEDCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS PEDIDO_SELECT;
DELIMITER &&
	CREATE PROCEDURE PEDIDO_SELECT(
        IN codigo INT(11),
        IN dataVenda date,
        IN dataPostagem date,
        IN dataEntrega date,
        IN statusPedido VARCHAR(255),
        IN tipoAvaliacao VARCHAR(255),
        IN cliente VARCHAR (255),
        IN email VARCHAR (255),
        IN anuncio VARCHAR (255)
	)
	BEGIN
	    SELECT 
			ped.pedCodigo, 
			tiv.tivDescricao, 
			stp.stpDescricao, 
			anu.anuDescricao, 
			cli.cliNome,
	        cli.cliEmail,
			ped.pedDataVenda, 
			ped.pedValorFrete, 
			ped.pedDataPostagem, 
			ped.pedDataEntrega, 
			ped.pedValorTotal, 
			ped.pedCodigoPostagem, 
			ped.pedObservacao,
			tiv.tivCodigo,
			stp.stpCodigo,
			anu.anuCodigo,
			cli.cliCodigo
		FROM pedido as ped 
		INNER JOIN tipoAvaliacoes as tiv ON ped.tivCodigo = tiv.TivCodigo 
		INNER JOIN anuncio as anu ON ped.anuCodigo = anu.anuCodigo 
		INNER JOIN cliente as cli ON ped.cliCodigo = cli.cliCodigo 
		INNER JOIN statusPedido as stp ON ped.stpCodigo = stp.stpCodigo
	    WHERE ped.pedCodigo = 
			CASE	
				WHEN codigo = 0 OR codigo IS NULL THEN ped.pedCodigo
				WHEN codigo > 0 THEN codigo		       
			END
		AND ((ped.pedDataVenda =
			CASE	
				WHEN dataVenda = '' OR dataVenda IS NULL THEN ped.pedDataVenda
				WHEN dataVenda <> '' THEN dataVenda
			END)
		OR (ped.pedDataVenda IS NULL))
	    AND ((ped.pedDataPostagem =
			CASE	
				WHEN dataPostagem = '' OR dataPostagem IS NULL THEN ped.pedDataPostagem
				WHEN dataPostagem <> '' THEN dataPostagem
			END)
		OR (ped.pedDataPostagem IS NULL))
		AND ((ped.pedDataEntrega =
			CASE	
				WHEN dataEntrega = '' OR dataEntrega IS NULL THEN ped.pedDataEntrega
				WHEN dataEntrega <> '' THEN dataEntrega
			END)
		OR (ped.pedDataEntrega IS NULL))
		AND stp.stpDescricao =
			CASE	
				WHEN statusPedido = '' OR statusPedido IS NULL THEN stp.stpDescricao
				WHEN statusPedido <> '' THEN statusPedido
			END
		AND tiv.tivDescricao =
			CASE	
				WHEN tipoAvaliacao = '' OR tipoAvaliacao IS NULL THEN tiv.tivDescricao
				WHEN tipoAvaliacao <> '' THEN tipoAvaliacao
			END
		AND cli.cliNome LIKE
			CASE	
				WHEN cliente = '' OR cliente IS NULL THEN cli.cliNome
				WHEN cliente <> '' THEN CONCAT('%', cliente, '%')
			END
		AND cli.cliEmail LIKE
			CASE	
				WHEN email = '' OR email IS NULL THEN cli.cliEmail
				WHEN email <> '' THEN CONCAT('%', email, '%')
			END
		AND anu.anuDescricao LIKE
			CASE	
				WHEN anuncio = '' OR anuncio IS NULL THEN anu.anuDescricao
				WHEN anuncio <> '' THEN CONCAT('%', anuncio, '%')
			END;
	END
&&

-- ITENSPEDIDO
DROP PROCEDURE IF EXISTS ITENSPEDIDO_INSERT;
DELIMITER &&
 	CREATE PROCEDURE ITENSPEDIDO_INSERT (
 	IN V_PEDCODIGO INT,
	   V_PROCODIGO INT,
	   V_ITPVALORVENDA DECIMAL(8,2),
	   V_ITPVALORCOMPRA DECIMAL(8,2),
	   V_ITPQUANTIDADE INT,
	   V_ITPTAXA DECIMAL(8,2)
   	)
	BEGIN
    	INSERT INTO ITENSPEDIDO (PEDCODIGO,PROCODIGO,ITPVALORVENDA,ITPVALORCOMPRA,ITPQUANTIDADE,ITPTAXA) VALUES (V_PEDCODIGO, V_PROCODIGO, V_ITPVALORVENDA,
		V_ITPVALORCOMPRA,V_ITPQUANTIDADE,V_ITPTAXA);
  	END
&&

DROP PROCEDURE IF EXISTS ITENSPEDIDO_UPDATE;
DELIMITER &&
 	CREATE PROCEDURE ITENSPEDIDO_UPDATE (
	IN V_PEDCODIGO INT,
	   V_PROCODIGO INT,
	   V_ITPVALORVENDA DECIMAL(8,2),
	   V_ITPVALORCOMPRA DECIMAL(8,2),
	   V_ITPTAXA DECIMAL(8,2)
   	)
	BEGIN
    	UPDATE ITENSPEDIDO SET PEDCODIGO = V_PEDCODIGO, PROCODIGO = V_PROCODIGO, ITPVALORVENDA = V_ITPVALORVENDA, ITPVALORCOMPRA = V_ITPVALORCOMPRA,
		ITPTAXA = V_ITPTAXA WHERE PEDCODIGO = V_PEDCODIGO AND PROCODIGO = V_PROCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS ITENSPEDIDO_DELETE;
DELIMITER &&
 	CREATE PROCEDURE ITENSPEDIDO_DELETE (
	IN V_PEDCODIGO INT   
   	)
	BEGIN
    	DELETE FROM ITENSPEDIDO WHERE PEDCODIGO = V_PEDCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS ITENSPEDIDO_SELECT;
DELIMITER &&
	CREATE PROCEDURE ITENSPEDIDO_SELECT(
    	IN codigo INT(11)
	)
	BEGIN
		SELECT itensPedido.*, produto.proNome, (itensPedido.itpValorVenda * itensPedido.itpQuantidade) as valorTotal
		FROM itensPedido INNER JOIN produto on itensPedido.proCodigo = produto.proCodigo
		WHERE pedCodigo = codigo;
	END
&&

--PRODUTO ANÚNCIO
DROP PROCEDURE IF EXISTS ANUNCIOPRODUTO_INSERT;
DELIMITER &&
 	CREATE PROCEDURE ANUNCIOPRODUTO_INSERT (
 	IN V_PROCODIGO INT,
	   V_ANUCODIGO INT
   	)
	BEGIN
    	INSERT INTO PRODUTOANUNCIO (ANUCODIGO, PROCODIGO) VALUES (V_PROCODIGO, V_ANUCODIGO);
  	END
&&

DROP PROCEDURE IF EXISTS ANUNCIOPRODUTO_DELETE;
DELIMITER &&
 	CREATE PROCEDURE ANUNCIOPRODUTO_DELETE (
 	IN V_ANUCODIGO INT
   	)
	BEGIN
    	DELETE FROM PRODUTOANUNCIO WHERE ANUCODIGO = V_ANUCODIGO;
  	END
&&

DROP PROCEDURE IF EXISTS ANUNCIOPRODUTO_SELECT;
DELIMITER &&
	CREATE PROCEDURE ANUNCIOPRODUTO_SELECT(
	    IN codigo INT(11)
	)
	BEGIN
		SELECT pro.proCodigo, pro.proNome, pro.proPreco, anu.anuPreco, ROUND((tip.tiaPercentual *  anu.anuPreco),2) as taxa 
		FROM tipoanuncio as tip 
		INNER JOIN (produto AS pro INNER JOIN (anuncio as anu INNER JOIN produtoAnuncio as prodAnu ON prodAnu.anuCodigo = anu.anuCodigo) ON pro.proCodigo = prodAnu.proCodigo) ON tip.tiaCodigo = anu.tiaCodigo 
		WHERE anu.anuCodigo = codigo 
		ORDER BY anu.anuDescricao;
	END
&&

--OUTRAS PROCEDURES
DROP PROCEDURE IF EXISTS RETORNA_INDEX;
DELIMITER &&
	CREATE PROCEDURE RETORNA_INDEX (
		IN TABELA VARCHAR(80)
	)
	BEGIN
		SELECT AUTO_INCREMENT
		FROM information_schema.tables
		WHERE table_name = TABELA
		AND table_schema = DATABASE();
	END
&&

DROP PROCEDURE IF EXISTS ATUALIZA_QUANTIDADE_PRODUTO;
DELIMITER &&
	CREATE PROCEDURE ATUALIZA_QUANTIDADE_PRODUTO (
		IN V_PROCODIGO INT,
		   V_QUANTIDADE INT,
		   V_OPERACAO BOOL
	)
	BEGIN
		DECLARE V_QUANTIDADE_ATUAL INT;

		SELECT PROQUANTIDADE
		INTO V_QUANTIDADE_ATUAL
		FROM PRODUTO
		WHERE PROCODIGO = V_PROCODIGO;

		IF V_OPERACAO = TRUE THEN
			UPDATE PRODUTO SET PROQUANTIDADE = V_QUANTIDADE_ATUAL + V_QUANTIDADE WHERE PROCODIGO = V_PROCODIGO;
		ELSE 
	  		UPDATE PRODUTO SET PROQUANTIDADE = V_QUANTIDADE_ATUAL - V_QUANTIDADE WHERE PROCODIGO = V_PROCODIGO;
  		END IF;
	END
&&

DROP PROCEDURE IF EXISTS AUTENTICA_USUARIO;
DELIMITER &&
	CREATE PROCEDURE AUTENTICA_USUARIO (
		IN V_USRLOGIN VARCHAR(255),
		IN V_USRSENHA VARCHAR(32)
	)
	BEGIN
		SELECT COUNT(USRCODIGO)
		FROM USUARIO
		WHERE USRLOGIN = V_USRLOGIN 
		AND USRSENHA = V_USRSENHA;
	END
&&

DROP PROCEDURE IF EXISTS VERIFICA_USUARIO;
DELIMITER &&
	CREATE PROCEDURE VERIFICA_USUARIO (
		IN V_USRLOGIN VARCHAR(255)
	)
	BEGIN
		SELECT COUNT(USRLOGIN) FROM USUARIO WHERE USRLOGIN = V_USRLOGIN;
	END
&&